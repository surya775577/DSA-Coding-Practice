Rotate Array by D Elements (Counter-Clockwise)
Problem Statement

Given an array arr[] of size n and an integer d, rotate the array elements to the left (counter-clockwise) by d positions.

Example:
Input:
arr = [1, 2, 3, 4, 5], d = 2
Output:
[3, 4, 5, 1, 2]

Approach Used

This solution uses the Reversal Algorithm to perform the rotation efficiently in-place with O(n) time complexity and O(1) extra space.

Steps:

Normalize d → Use d = d % n to handle cases where d > n.

Reverse the first d elements → This moves the left portion into reversed order.

Reverse the remaining n - d elements → This moves the right portion into reversed order.

Reverse the entire array → This final reversal puts the array into the desired rotated order.

Code Explanation
class Solution:
    # Function to rotate an array by d elements in counter-clockwise direction.
    def rotateArr(self, arr, d):
        n = len(arr)
        d = d % n  # Handle cases where d > n
        self.reverseArray(arr, 0, d - 1)    # Step 1: Reverse first d elements
        self.reverseArray(arr, d, n - 1)    # Step 2: Reverse remaining elements
        self.reverseArray(arr, 0, n - 1)    # Step 3: Reverse whole array

    # Helper function to reverse a subarray in-place
    def reverseArray(self, arr, start, end):
        while start < end:
            arr[start], arr[end] = arr[end], arr[start]
            start += 1
            end -= 1

Complexity Analysis

Time Complexity: O(n) → Each element is swapped at most twice.

Space Complexity: O(1) → In-place rotation without using extra arrays.
